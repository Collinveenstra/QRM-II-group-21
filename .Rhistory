scores[c(2:4)]=c(4,6,7)
scores=append(scores,10)
scores
scores=append(scores,c(10,9,8)
scores
scores=append(scores,c(10,9,8))
scores
names(scores)[5:8]=c("c","f","d","e")
scores
sort(scores)
names(scores)[1]="Freek"
scores
summary(scores)
sort(scores,decreasing=TRUE)
sort(scores,decreasing)
sort(scores,decreasing=TRUE)
colors
colors
colors
colors= c("red","blue","green",,"yellow","black")
colors = c("red","blue","green")
colors
colors=factor(colors)
colors = c("red","blue","green","blue","black")
colors
colors=factor(colors)
colors=factor(colors)
levels(colors)
colors
colors = c("red","blue","green","blue","black")
sizes=factor(c("medium","small","large","small"))
sizes
sizes=factor(sizes,levels=c("small","medium","large"))
sizes
nums=c(7,3,12,3)
nums=factor(nums)
nums
my_list=list(
name="Alice",
scores=c(85,90,95),
year=2,
econ=TRUE
)
my_list
my_unnamed_list=list(
name="Alice",
scores=c(85,90,95),
year=2,
econ=TRUE
)
unlist(my_unnamed_list)
list(my_list,my_unnamed_list)
placeholder=list(my_list,my_unnamed_list)
placeholder[[1]]
placeholder[[2]]
matrix(1:6,nrow=2,ncol=3)
matrix(1:6,nrow=2,ncol=3,byrow=TRUE)
colnames(mymatix)
colnames(my_matix)
colnames(my_matrix)=c("A","B","C")
my_matrix(1:6,nrow=2,ncol=3,byrow=TRUE)
colnames(my_matrix)=c("A","B","C")
m1=matrix(1:6,nrow=2,ncol=3,byrow=TRUE)
colnames(m1)=c("A","B","C")
m1
view(m1)
view(my_matrix)
view(m1)
View(m1)
my_matrix[1,2]
m1[1,2]
rownames(m1)
m1(c(1,3),c(1,2))
m1(c(1,2),c(1,3))
m1[c(1,2),c(1,3)]
m1[1,]
df=as.data.frame(
name=c("Piet","Jan","Henk"),
score=c(88.5,92,90.1),
age=c(25,30,28)
)
df=as.data.frame(
name=c("Piet","Jan","Henk"),
score=c(88.5,92,90.1),
age=c(25,30,28)
)
df
df<-data.frame(
name=c("Piet","Jan","Henk"),
score=c(88.5,92,90.1),
age=c(25,30,28)
)
df
subset(df,age>26)
df[df$age>26,]
which(df$age>26)
df[orders(df$score),]
df[order(df$score),]
df[-order(df$score),]
df[order(-df$score),]
getwwd()
s is me adding two and three
set.seed(1234)
x=rnorm(10000)
mean(x)
mean_x_hardcoded=0.01
mean_x_direct=mean(x)
mean_x_hardcoded <0.01
mean_x_direct<0.01
mean(c(1,2,3,7,32,6,2,6,3,4,5,7,2))
sqrt(16)
x=1:5
args(median)
median(x)
x=c(1,2,3,NA,5)
median(x,na.rm=TRUE)
?median
?tibble
??tibble
??weighted.mean
??weighted.mean
add_one=function(y)
add_one=function(y){
result=y+1
return(result)
}
add_one(5)
add_one=function(y){
result=y+1,
add_one(5)
add_one(5)
add_one(5)
add_one=function(y){
result=y+1
return(result)
}
add_one(5)
log(mean(abs(c(-3,4,-5))))
c(-3,4,-5) |>abs() |>log()
c(-3,4,-5) |>abs() |>mean |>log()
c(-3,4,-5) |>abs() |>mean |>log()
c(-3,4,-5) |>abs() |>mean |>log()
c(-3,4,-5)|>abs()|>mean()|>log()
5*2
-2*2
8*2
-1*2
3*2
for(n in nums){
print(n*2)
}
nums=c(5,-2,8,-1,3)
for(n in nums){
print(n*2)
}
for(n in nums){
mean(rnorm(10000))
}
nums=c(5,-2,8,-1,3)
for(n in nums){
mean(rnorm(10000))
}
nums=c(5,-2,8,-1,3)
for(i in 1:10000){
mean(rnorm(10000))
}
mean
mean(nums)
df=data.frame(
height=c(170,180,175),
weight=c(65,80,72),
age=c(25,30,28)
)
df=data.frame(
height=c(170,180,175),
weight=c(65,80,72),
age=c(25,30,28)
)
for(col_name in colnames(df)){
print(paste("Mean of", col_name,"is",mean(df[,col_name])))
}
for(col in colnames(data)){
data[,paste0("log_",col)]=log(data[,col])
}
for(col in colnames(df)){
df[,paste0("log_",col)]=log(df[,col])
}
View(df)
count=1
while(count<=5){
print(count
count=count+1
count=1
while(count<=5){
print(count)
count=count+1
}
install.packages("nycflights13")
library(nycflight)
library(nycflights13)
planes
reps=10
system.time({
while reps>0{}
reps=10
system.time({
while reps>0{
reps=10
system.time({
while reps>0 {
reps=10
system.time({
while reps > 0 {
reps=10
system.time({
while reps > 0 {
file_size_1=1500
file_size_2=500
if (file_size_1>1000){
print("file size too large")
}
file_size_1=1500
file_size_2=500
if (file_size_1>1000){
print("file size too large")
}else{
print("file size is within limits")
}
file_size_1=1500
file_size_2=500
if (file_size_2>1000){
print("file size too large")
}else{
print("file size is within limits")
}
file_size_1=1500
file_size_2=500
file_size_3=0
file_evaluator=function(file_size){
if (file size == 0){
file_size_1=1500
file_size_2=500
file_size_3=0
file_evaluator=function(file_size){
if (file_size == 0){
print ("No file detected")
}
else if (file_size_2>1000){
print("file size too large")
}else{
print("file size is within limits")
}
}
file_evaluator(file_size_2)
file_evaluator(file_size_1)
file_size_1=1500
file_size_2=500
file_size_3=0
file_evaluator=function(file_size){
if (file_size == 0){
print ("No file detected")
}
else if (file_size>1000){
print("file size too large")
}else{
print("file size is within limits")
}
}
file_evaluator(file_size_1)
file_evaluator(file_size_3)
flights$delayed=ifelse
flights$delayed=ifelse(flights$dep_delay>0,1,0)
flights
flights$delayed=ifelse(flights$dep_delay>0,1,0)
View(flights)
nums=c(5,-2,8,-1,3)
for (n in nums){
if(n<0){
next
}
print (n)
}
count=1
while(count>0){
print(count)
if (count>100){
break
}
count=count+1
}
a=TRUE
b=FALSE
a
class(a)
b
class(b)
a="true"
a
true
x=5
x>3
x==10
x!=10
as.numeric(TRUE)
as.numeric(FALSE)
TRUE+7
nums=c(5,12,18,7,9)
nums>10
nums(nums>10)
nums=nums>10
nums[nums>10]
nums=c(5,12,18,7,9)
nums[nums>10]
a="Hello"
b="world"
c="How's it going"
abc
a
b
c
a,b,c
worldlist=c("cat","dog","caterpillar","fish")
grep("cat",worldlist)
grepl("cat", worldlist)
text="the cat sat on the catmat"
sub("cat","dog",text)
gsub("cat","dog",text)
text="the catmat sat on the cat"
sub("cat","dog",text)
gsub("cat","dog",text)
a="Hello"
b="world"
c="what's up"
paste(a,b,c)
paste(a,b,c, sep="/")
paste(a,b,c, sep="_")
paste0(a,b,c)
"Hello"+3
"Hello"+"3"
x=c(1,2,NA,4)
x
mean(x)
mean(x,na.rm(NA))
mean(x,na.rm=TRUE)
y=NULL
y
length(y)
x=c(1,2,NULL,4)
x
z=0/0
z
is.nan(z)
is.na(z)
x=5
x
class(x)
y=5L
y
class(y)
x=x+8
x
class(x)
y=y+8
y
class(y)
y=y+8-8
y
class(y)
x=x+8L
x
class(x)
my_mat=matrix(1:16,nrow=4,bycol=TRUE)
my_mat=matrix(1:16,nrow=4)
View my_matrix
View=my_matrix
df = datasets::sleep
View(df)
df = datasets::state.x77
View(df)
df = datasets::sunspot.year
df = MASS::Cars93
View(df)
1+1
setwd("~/GitHub/QRM-II-group-21")
knitr::opts_chunk$set(echo = TRUE)
movies <- read.table("movies1.tsv")
movies <- read.table("movies1.tsv",sep=",", header=TRUE)
View(movies)
movies <- read.table("movies1.tsv")
View(movies)
View(movies)
View(movies)
movies <- read.table("movies1.tsv", header=TRUE)
head(movies)
ncol(movies)
nrow(movies)
library(tidyverse)
movies$profit = movies$revenue - movies$budget
movies %>%
summarise(mean(profit),
median(profit),
min(profit),
max(profit))
#WRITE YOUR CODE HERE
Nominal: orginal_language
Inverval: release_year
Ratio: vote_count
boxplot(movies$profit)
boxplot(movies$profit, main='Variable Profit')
boxplot(movies$profit,
main='Variable Profit',
ylab="Profit",
xlab="Movies")
boxplot(movies$profit,
horizontal = TRUE,
main='Variable Profit',
ylab="Profit",
xlab="Movies")
Q1 = quantile(movies$profit, 0.25)
Q1 = quantile(movies$profit, 0.25)
Q1
Q2 = quantile(movies$profit, 0.50)
Q2
Q1 = quantile(movies$profit, 0.25)
Q2 = quantile(movies$profit, 0.50)
Q3 = quantile(movies$profit, 0,75)
Q4 = max(movies$profit)
knitr::opts_chunk$set(echo = TRUE)
boxplot(movies$profit,
main="Variable Profit",
ylab="Profit",
xlab="Movies")
Q1 = quantile(movies$profit, 0.25)
Q2 = quantile(movies$profit, 0.50)
Q3 = quantile(movies$profit, 0,75)
Q4 = max(movies$profit)
boxplot(movies$profit,
log = y,
main='Variable Profit',
ylab="Profit",
xlab="Movies")
boxplot(movies$profit,
log = "y",
main='Variable Profit',
ylab="Profit",
xlab="Movies")
boxplot(movies$profit,
main='Variable Profit',
ylab="Profit",
xlab="Movies",
outline = FALSE)
boxplot(movies$profit,
main='Variable Profit',
ylab="Profit",
xlab="Movies",
outline = FALSE)
Q1
Q3 = quantile(movies$profit, 0.75)
boxplot(movies$profit,
main='Variable Profit',
ylab="Profit",
xlab="Movies")
boxplot(movies$profit,
main='Variable Profit',
ylab="Profit",
xlab="Movies",
outline = FALSE)
boxplot(movies$profit,
main='Variable Profit',
ylab="Profit",
xlab="Movies")
boxplot(movies$profit,
main='Variable Profit',
ylab="Profit",
xlab="Movies",
outline = FALSE)
movies %>%
summarise(mean_profits = mean(log_profits[is.finite(log_profits)], na.rm = TRUE))
library(tidyverse)
movies$log_profits = log(movies$profit)
movies %>%
summarise(mean_profits = mean(log_profits[is.finite(log_profits)], na.rm = TRUE))
View(movies)
movies$log_profits <=0 = NA
[movies$log_profits <= 0] = NA
(movies$log_profits <= 0) = NA
(movies$log_profits <= 0) = NA
movies$log_profits <= 0 <- NA
library (tidyverse)
movies$log_profits <= 0 <- NA
movies$log_profits[movies$log_profits<=0]<- NA
movies$log_profits[movies$log_profits = NaN]<- NA
movies$log_profits[movies$log_profits == NaN]<- NA
movies$log_profits[movies$log_profits<=0 | movies$log_profits==NaN]<- NA
movies$log_profits[movies$log_profits<=0 | movies$log_profits==NaN]<- NA
movies$log_profits[movies$log_profits<=0 | movies$log_profits==NaN ]<- NA
movies$log_profits[movies$log_profits == NaN]<- NA
movies$log_profits[movies$log_profits == NaN]<- NA
View(movies)
movies$log_profits[is.nan(movies$log_profits)] <- NA
mean(movies$log_profits, na.rm = TRUE)
boxplot(movies$log_profits,
main = "Log of Profits",
xlab = "Movies",
ylab = "Log of Profits")
boxplot(movies$log_profits,
main = "Log of Profits",
xlab = "Movies",
ylab = "Log of Profits")
ncol(movies)
nrow(movies)
head(movies$index, n = 10)
